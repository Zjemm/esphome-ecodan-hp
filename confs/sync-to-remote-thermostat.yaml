# =============================================================================
# Sync Temperature to Remote Thermostat via REST API
# =============================================================================
# This configuration automatically sends Zone 1 or Zone 2 room temperature 
# from the CN105 heat pump to the CNRF remote thermostat via HTTP POST.
#
# DOCUMENTATION:
#   See docs/sync-to-remote-thermostat.md for complete setup instructions
#
# REQUIREMENTS:
#   - http_request component must be configured with appropriate timeout
#   - Recommended: timeout: 5s and verify_ssl: false in http_request
#
# FEATURES:
#   - Periodic sync (configurable interval via Web UI)
#   - Non-blocking HTTP requests (won't cause ESP reboots)
#   - Fully configurable via Web UI (no reflash needed)
#   - Supports both Zone 1 and Zone 2
#   - Safety: Default OFF, empty IP validation
#   - Respects user-configured sync interval
# =============================================================================

# =============================================================================
# Web UI Configurable Settings
# =============================================================================

# Remote thermostat IP address (configurable via Web UI)
text:
  - platform: template
    name: ${sync_remote_thermostat_ip}
    id: remote_thermostat_ip_setting
    optimistic: true
    initial_value: ""
    restore_value: true
    mode: text
    icon: "mdi:ip-network"
    entity_category: config

  - platform: template
    name: ${sync_remote_room_id}
    id: remote_room_id_setting
    optimistic: true
    initial_value: "0"
    restore_value: true
    mode: text
    icon: "mdi:numeric"
    entity_category: config

# Sync interval in seconds (configurable via Web UI)
number:
  - platform: template
    name: ${sync_interval_seconds}
    id: sync_interval_setting
    optimistic: true
    initial_value: 60
    restore_value: true
    min_value: 10
    max_value: 300
    step: 5
    mode: box
    icon: "mdi:timer-outline"
    entity_category: config
    unit_of_measurement: "s"

# Zone selection: Zone 1 or Zone 2
select:
  - platform: template
    name: ${sync_zone_selector}
    id: sync_zone_selector
    optimistic: true
    restore_value: true
    icon: "mdi:home-thermometer"
    entity_category: config
    options:
      - "Zone 1"
      - "Zone 2"
    initial_option: "Zone 2"

# Enable/disable switch for syncing
switch:
  - platform: template
    name: ${sync_to_remote_enabled}
    id: sync_to_remote_enabled
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    icon: "mdi:thermometer-lines"
    entity_category: config

# Global variable to track last sync time
globals:
  - id: last_sync_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

# Interval to check if sync is needed
# Fixed 10-second interval, but respects user's sync_interval_setting
interval:
  - interval: 10s
    then:
      - if:
          condition:
            and:
              - switch.is_on: sync_to_remote_enabled
              - lambda: 'return !id(remote_thermostat_ip_setting).state.empty();'
              - lambda: |-
                  // Check if enough time has elapsed based on user setting
                  unsigned long now = millis();
                  unsigned long interval_ms = id(sync_interval_setting).state * 1000;
                  return (now - id(last_sync_time) >= interval_ms);
              - lambda: |-
                  // Check if temperature is valid before attempting sync
                  std::string selected_zone = id(sync_zone_selector).state;
                  if (selected_zone == "Zone 1" && id(z1_room_temp).has_state()) {
                    return !isnan(id(z1_room_temp).state);
                  } else if (selected_zone == "Zone 2" && id(z2_room_temp).has_state()) {
                    return !isnan(id(z2_room_temp).state);
                  }
                  return false;
          then:
            - lambda: |-
                // Update last sync time
                id(last_sync_time) = millis();
                
                // Get temperature and log it
                std::string selected_zone = id(sync_zone_selector).state;
                float temp = NAN;
                
                if (selected_zone == "Zone 1" && id(z1_room_temp).has_state()) {
                  temp = id(z1_room_temp).state;
                } else if (selected_zone == "Zone 2" && id(z2_room_temp).has_state()) {
                  temp = id(z2_room_temp).state;
                }
                
                if (!isnan(temp)) {
                  // Update display sensor
                  id(last_synced_temp).publish_state(temp);
                  
                  // Build URL and log it
                  std::string ip = id(remote_thermostat_ip_setting).state;
                  std::string room_id = id(remote_room_id_setting).state;
                  std::string url = "http://" + ip + "/number/room_" + room_id + "/set?value=" + str_sprintf("%.1f", temp);
                  ESP_LOGI("sync", "Syncing %.1f°C to: %s", temp, url.c_str());
                }
            - http_request.post:
                url: !lambda |-
                  std::string selected_zone = id(sync_zone_selector).state;
                  float temp = NAN;
                  
                  if (selected_zone == "Zone 1" && id(z1_room_temp).has_state()) {
                    temp = id(z1_room_temp).state;
                  } else if (selected_zone == "Zone 2" && id(z2_room_temp).has_state()) {
                    temp = id(z2_room_temp).state;
                  }
                  
                  std::string ip = id(remote_thermostat_ip_setting).state;
                  std::string room_id = id(remote_room_id_setting).state;
                  return "http://" + ip + "/number/room_" + room_id + "/set?value=" + str_sprintf("%.1f", temp);
                body: ""
                on_response:
                  then:
                    - lambda: |-
                        ESP_LOGI("sync", "HTTP POST success! Status: %d", response->status_code);
                on_error:
                  then:
                    - lambda: |-
                        ESP_LOGE("sync", "HTTP POST failed!");

# Sensors for sync feature
sensor:
  # Last synced temperature display sensor
  - platform: template
    name: ${sync_last_synced_temp}
    id: last_synced_temp
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:thermometer-check"
    entity_category: diagnostic
